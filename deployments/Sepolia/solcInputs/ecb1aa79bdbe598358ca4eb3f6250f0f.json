{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract FundMe {\n\n   uint256 public constant minUSD = 50 * 1e18;\n\n   address[] public funders;\n   mapping(address => uint256) public addressToAmount;\n\n   address public immutable i_owner;\n\n    AggregatorV3Interface public pricefeed ;\n\n   constructor(address pricefeedAddress){\n     i_owner = msg.sender ;\n     pricefeed =  AggregatorV3Interface(pricefeedAddress);\n   }\n\n   function fund() public payable {\n    //i want to recieve at least 1 ether lets say \n    require(getConversionRate(msg.value, pricefeed) > minUSD, \"not enough fund\");\n    funders.push(msg.sender);\n    addressToAmount[msg.sender] = msg.value;\n   }\n\n   function getPrice(AggregatorV3Interface apricefeed ) public view returns (uint256) {\n      //abi and address of the contract through which we gonna get the price \n      // 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n\n     // AggregatorV3Interface pricefeed = AggregatorV3Interface( _pricefeedAddress );\n\n       ( /* uint80 roundID */,\n            int answer,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/) = apricefeed.latestRoundData();\n       return uint256(answer * 1e10);\n       \n   }\n\n   function getConversionRate(uint256 ethAmount,  AggregatorV3Interface _pricefeed ) public view returns (uint256){\n      uint256 ethPrice = getPrice(_pricefeed);\n      uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n      return ethAmountInUsd;\n   }\n\n   function withdraw() public OnlyOwner {\n     //call\n\n     (bool callSuccess,) = payable(msg.sender).call{value : address(this).balance}(\"\");\n     require(callSuccess , \"failed call\");\n\n   }\n\n\n   modifier OnlyOwner{\n        require(msg.sender == i_owner, \"not owner\");\n        _;\n   }\n \n   receive() external payable {\n      fund();\n    }\n\n   fallback() external payable {\n      fund();\n    } \n  \n\n\n\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}